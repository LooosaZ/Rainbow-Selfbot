"use strict";
/// <reference lib="dom" />
Object.defineProperty(exports, "__esModule", { value: true });
exports.callTwitchApi = exports.callTwitchApiRaw = void 0;
var tslib_1 = require("tslib");
var cross_fetch_1 = require("@d-fischer/cross-fetch");
var qs_1 = require("@d-fischer/qs");
var transform_1 = require("./helpers/transform");
var url_1 = require("./helpers/url");
var TwitchApiCallOptions_1 = require("./TwitchApiCallOptions");
/**
 * Makes a call to the Twitch API using the given credentials, returning the raw Response object.
 *
 * @param options
 * @param clientId
 * @param accessToken
 * @param fetchOptions
 */
function callTwitchApiRaw(options, clientId, accessToken, fetchOptions) {
    var _a;
    if (fetchOptions === void 0) { fetchOptions = {}; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var type, url, params, headers, body, requestOptions;
        return tslib_1.__generator(this, function (_b) {
            type = options.type === undefined ? TwitchApiCallOptions_1.TwitchApiCallType.Kraken : options.type;
            url = url_1.getTwitchApiUrl(options.url, type);
            params = qs_1.stringify(options.query, { arrayFormat: 'repeat' });
            headers = new cross_fetch_1.Headers({
                Accept: type === TwitchApiCallOptions_1.TwitchApiCallType.Kraken ? 'application/vnd.twitchtv.v5+json' : 'application/json'
            });
            body = undefined;
            if (options.body) {
                body = qs_1.stringify(options.body);
                headers.append('Content-Type', 'application/x-www-form-urlencoded');
            }
            else if (options.jsonBody) {
                body = JSON.stringify(options.jsonBody);
                headers.append('Content-Type', 'application/json');
            }
            if (clientId && type !== TwitchApiCallOptions_1.TwitchApiCallType.Auth) {
                headers.append('Client-ID', clientId);
            }
            if (accessToken) {
                headers.append('Authorization', (type === TwitchApiCallOptions_1.TwitchApiCallType.Helix ? 'Bearer' : 'OAuth') + " " + accessToken);
            }
            requestOptions = tslib_1.__assign(tslib_1.__assign({}, fetchOptions), { method: (_a = options.method) !== null && _a !== void 0 ? _a : 'GET', headers: headers,
                body: body });
            return [2 /*return*/, cross_fetch_1.default(params ? url + "?" + params : url, requestOptions)];
        });
    });
}
exports.callTwitchApiRaw = callTwitchApiRaw;
/**
 * Makes a call to the Twitch API using given credentials.
 *
 * @param options The configuration of the call.
 * @param clientId The client ID of your application.
 * @param accessToken The access token to call the API with.
 *
 * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
 * @param fetchOptions Additional options to be passed to the `fetch` function.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function callTwitchApi(options, clientId, accessToken, fetchOptions) {
    if (fetchOptions === void 0) { fetchOptions = {}; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var response;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, callTwitchApiRaw(options, clientId, accessToken, fetchOptions)];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, transform_1.transformTwitchApiResponse(response)];
            }
        });
    });
}
exports.callTwitchApi = callTwitchApi;
